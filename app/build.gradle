apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext").android
    compileSdkVersion globalConfiguration.androidCompileSdkVersion
    buildToolsVersion globalConfiguration.androidBuildToolsVersion
    signingConfigs {
        developKey {
            keyAlias KEYALIAS
            keyPassword KEYPASSWORD
            storeFile file(STOREFILE)
            storePassword STOREPASSWORD
        }
    }

    defaultConfig {
        applicationId globalConfiguration.applicationId
        minSdkVersion globalConfiguration.androidMinSdkVersion
        targetSdkVersion globalConfiguration.androidTargetSdkVersion
        versionCode globalConfiguration.yourVersionCode
        versionName globalConfiguration.yourVersionName
        flavorDimensions "versionCode"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    android.applicationVariants.all { variant ->
        // 这里修改apk文件名
        def fileName = "${releaseTime()}-Android_Retrofit+Rx_版本号-${defaultConfig.versionCode}_版本名-${defaultConfig.versionName}_${variant.buildType.name}.apk"
        variant.outputs.all { output ->
            outputFileName = fileName
        }
    }

    productFlavors {
        ID_APP {
            buildConfigField("String", "APP_CHANNEL_ID", '"APP"')
        }
//        ID_10002{
//            buildConfigField("String", "APP_CHANNEL_ID", '"10002"')
//        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.developKey
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            signingConfig signingConfigs.developKey
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    def configDependencies = rootProject.ext.configDependencies

    api(configDependencies.appcompat_v7) { exclude module: 'support-v4' }
    api(configDependencies.support_v4) { force = true }
    implementation project(':x_library')
    api androidDependencies.butterknife
    annotationProcessor androidDependencies["butterknife-compiler"]
    //  retrofit2需要相关的依赖
    api androidDependencies.retrofit2
    api androidDependencies["logging-interceptor"]
}
