apply plugin: 'com.android.library'

android {
    //我只想把适合自己使用的方法加入进来，一点点来吧,但他并不一定适合你，拿你喜欢的吧。
    def globalConfiguration = rootProject.extensions.getByName("ext").android
    compileSdkVersion globalConfiguration.androidCompileSdkVersion
    defaultConfig {
        minSdkVersion globalConfiguration.androidMinSdkVersion
        targetSdkVersion globalConfiguration.androidTargetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    def deployDependencies = rootProject.ext.configDependencies
    api deployDependencies.design
    api deployDependencies.constraint
    androidTestCompile(deployDependencies["espresso-core"], {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation deployDependencies.junit

//    def androidDependencies = rootProject.ext.androidDependencies
//     gson
    api androidDependencies.circleimageview
    api androidDependencies.glide
//    因为下方retrofit2中集成了gson 这里不再单独集成了
//    api androidDependencies.gson
    api androidDependencies.logger
    api androidDependencies.butterknife
    annotationProcessor androidDependencies["butterknife-compiler"]
//    规范安卓UI响应 以RxJava的形式来处理UI事件
//    compile androidDependencies.rxbinding

//    retrofit2需要相关的依赖
    api androidDependencies["adapter-rxjava"]
    api androidDependencies["converter-gson"]
//    api 'io.reactivex.rxjava2:rxandroid:2.0.1'
//    api 'io.reactivex.rxjava2:rxjava:2.1.1'
    api androidDependencies.rxandroid
    api androidDependencies.rxjava
}
